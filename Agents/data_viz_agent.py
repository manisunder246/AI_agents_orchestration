import openai
import config
import pandas as pd
import matplotlib.pyplot as plt
from semantic_kernel.functions import kernel_function
from openai import OpenAI

class DataVizAgent:
    def __init__(self, data_extractor_agent):
        """
        Initialize the DataVizAgent with an instance of DataExtractorAgent
        to execute the SQL queries.
        """
        self.data_extractor_agent = data_extractor_agent

    @kernel_function
    async def execute_sql_query(self, sql_query):
        """
        Execute the provided SQL query and return a DataFrame.
        This function will execute the SQL query generated by the SQL Generator Agent.
        """
        # Connect to the DataExtractorAgent to execute the query
        result_df = self.data_extractor_agent.execute_query(sql_query)
        print(type(result_df))
        # Ensure that the result is a DataFrame and handle any possible dict/list format
        if isinstance(result_df, pd.DataFrame):
            print("Query executed successfully and result is a DataFrame.")
            return result_df
        elif isinstance(result_df, dict) or isinstance(result_df, list):
            print("Converting result to DataFrame from dict/list format.")
            return pd.DataFrame(result_df)
        else:
            raise Exception("Failed to retrieve valid data from the database. Unexpected format.")


    @kernel_function
    async def determine_plot_type(self, df, sql_query):
        """
        Determine the plot type based on the SQL query and the resulting DataFrame.
        Generate the Matplotlib code dynamically using the LLM.
        """
        client = OpenAI(api_key=config.OPENAI_API_KEY)
        # Use an LLM to figure out the plot type based on user query and df
    # Convert dict to string for prompt if df is a dict
        if isinstance(df, dict):
            print("Received a dict, converting to a string format for the prompt.")
            # Convert dict to a string for the prompt (e.g., showing key-value pairs)
            df_string = "\n".join([f"{k}: {v}" for k, v in df.items()])
        else:
            # If it's a DataFrame, use the original method
            df_string = df.head().to_string()
     
        prompt = f"""
        The SQL query '{sql_query}' has been executed, and the following DataFrame has been generated:
        {df_string}

        Based on this query and data, please suggest the appropriate plot type (e.g., bar, line, scatter, pie, histogram etc).
        Additionally, generate the Matplotlib code for rendering this plot. Ensure the code is ready to execute without modification.
        IMPORTANT: This python code will be directly used to generate plots. So make sure it is syntactically ACCURATE.
        GENERATE ONLY PYTHON CODE and NO ADDITIONAL TEXT.
        """
        
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )
        plot_code = response.choices[0].message.content
        print(plot_code)

        start_idx = plot_code.find("import")  # Find where the actual code starts
        end_idx = plot_code.rfind("plt.show()") + len("plt.show()")
        if start_idx != -1 and end_idx != -1:
            plot_code = plot_code[start_idx:end_idx]
        try:
            exec(plot_code)
            plt.show()

        except Exception as e:
            print(f"Error executing plot code: {e}")


